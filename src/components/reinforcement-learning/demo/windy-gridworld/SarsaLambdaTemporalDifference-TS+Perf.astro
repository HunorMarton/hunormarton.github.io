---
import * as tf from "@tensorflow/tfjs-node";

const state = tf.tensor2d([
  [1, 2, 3, 4],
  [5, 6, 7, 8],
]);
const scalar = tf.scalar(2);
const eligibilityTracesRaw = tf.tensor2d([
  [1, 2, 3, 4],
  [1, 2, 3, 4],
]);

state.mul(scalar).print();
state.mul(scalar).mul(eligibilityTracesRaw).print();

import type { Policy } from "../../types";
import type {
  WindyAgentState,
  WindyAction,
} from "../../environments/windyGridworldEnvironment.ts";
import GridWithLabels from "../../ui/grid/GridWithLabels.astro";

import { temporalDifferencePolicyControl as tdLambdaPerf } from "./SarsaLambdaTemporalDifferenceControl-Perf.ts";
import { temporalDifferencePolicyControl as tdLambdaTS } from "./SarsaLambdaTemporalDifferenceControl-TS.ts";

import {
  transformWindyGridworldPolicyControl,
  transformWindyGridworldActionValueFunction,
} from "./utils.ts";

const initialPolicyEvaluation: () => WindyAction = () => {
  const actions: WindyAction[] = ["up", "down", "left", "right"];
  return actions[Math.floor(Math.random() * 4)];
};

const initialPolicy: Policy<WindyAgentState, WindyAction> = {
  improve() {},
  greedy: initialPolicyEvaluation,
  evaluate: initialPolicyEvaluation,
};

const episodes = 10000;
const alpha = 0.4; // 0.4 means we value new information
const gamma = 0.9; // 0.9 means we value future rewards (1 means no discounting, 0 means only immediate reward)
const epsilon = 0.2; // 0.2 means 20% of the time we explore
const lambda = 0.5; // 0 means no eligibility traces

const tdPerfResult = tdLambdaPerf({
  initialPolicy,
  episodes,
  alpha,
  gamma,
  epsilon,
  lambda,
});

const tdPerfValueFunction =
  transformWindyGridworldActionValueFunction(tdPerfResult);
const tdPerfPolicy = transformWindyGridworldPolicyControl(tdPerfResult);

const tdTSResult = tdLambdaTS({
  initialPolicy,
  episodes,
  alpha,
  gamma,
  epsilon,
  lambda,
});

const tdTSValueFunction =
  transformWindyGridworldActionValueFunction(tdTSResult);
const tdTSPolicy = transformWindyGridworldPolicyControl(tdTSResult);
---

<div>
  <h4>With Temporal-Difference - plain JS</h4>
  <GridWithLabels
    data={tdPerfValueFunction}
    size={80}
    verticalRange={[0, 6]}
    horizontalRange={[0, 9]}
    terminalStates={[[7, 3]]}
  />
  <GridWithLabels
    data={tdPerfPolicy}
    size={80}
    verticalRange={[0, 6]}
    horizontalRange={[0, 9]}
    terminalStates={[[7, 3]]}
  />
  <h4>With Temporal-Difference - TensorFlow.js</h4>
  <GridWithLabels
    data={tdTSValueFunction}
    size={80}
    verticalRange={[0, 6]}
    horizontalRange={[0, 9]}
    terminalStates={[[7, 3]]}
  />
  <GridWithLabels
    data={tdTSPolicy}
    size={80}
    verticalRange={[0, 6]}
    horizontalRange={[0, 9]}
    terminalStates={[[7, 3]]}
  />
</div>
